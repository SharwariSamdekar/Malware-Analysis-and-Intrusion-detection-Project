import csv
import pickle
import sys
import os
import numpy as np





# Code for feature extraction

headers = ['e_magic:','e_cblp:','e_cp:','e_crlc:','e_cparhdr:','e_minalloc:','e_maxalloc:','e_ss:','e_sp:','e_csum:','e_ip:','e_cs:','e_lfarlc:','e_ovno:','e_oemid:','e_oeminfo:','e_lfanew:','Machine:','NumberOfSections:','PointerToSymbolTable:',
'NumberOfSymbols:','SizeOfOptionalHeader:','Characteristics:','Magic:','MajorLinkerVersion:','MinorLinkerVersion:','SizeOfCode:','SizeOfInitializedData:','SizeOfUninitializedData:','AddressOfEntryPoint:','BaseOfCode:',
'BaseOfData:','ImageBase:','SectionAlignment:','FileAlignment:','MajorOperatingSystemVersion:','MinorOperatingSystemVersion:','MajorImageVersion:','MinorImageVersion:','MajorSubsystemVersion:','MinorSubsystemVersion:',
'Reserved1:','SizeOfImage:','SizeOfHeaders:','CheckSum:','Subsystem:','DllCharacteristics:','SizeOfStackReserve:','SizeOfStackCommit:','SizeOfHeapReserve:','SizeOfHeapCommit:','LoaderFlags:','NumberOfRvaAndSizes:']


def main():
	print(sys.argv[1])
	cd = os.getcwd() 
	os.chdir(sys.argv[1])
	f = open("Features.csv","w")
	writer = csv.writer(f)
	for file in os.listdir(ndir) :
		if(file == "Structure_Info.txt") :
			with open("Structure_Info.txt",encoding = "utf8",errors = "ignore") as newfile :
				i = 0
				j = 0
				listfeat = list()
				for line in newfile :
					for word in line.split():
						if i == 1 :
							w = int(word,16)
							np.isnan(w)
							listfeat.append(int(word,16))
							i = 0
							continue
						if(j == 53	) :
							break
						if word == headers[j] :
							i = 1
							j = j+1
			listfeat.append(file)
			if(len(listfeat) == 54):
				writer.writerow(listfeat)
	f.close()




#Read data from test file
dat = pd.read_csv("Features.csv", sep = ',', header = 0)
data = dat.sample(frac = 1)
data.head()

array = data.values
X = array[:,:53]
print(X)

# Code to predict and write result into the file

result = open("static.csv","w")
csWriter = csv.writer(result)
os.chdir(cd)
load_model = pickle.load(open('model.txt','rb'))
op = load_model.predict(X)

ans = list()

for i in range(0,len(op)) :
	ans.append(X[54])
	if(op == 0) :
		ans.append('B')
	else :
		and.append('M')
	csWriter.writerow(ans)
result.close()

# Driver Code 
if __name__ == '__main__': 
      
    # Calling main() function 
    main() 




